import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np 
import pandas as pd

# загружаем данные
data = pd.read_csv('data_final_clust.csv')
# списки с названиями регионов и признаков
regions_name = data['region'].to_list()
features_name = data.columns.to_list()
for feature in features_name:
    if 'bad' in feature or 'trend' in feature:
        features_name.remove(feature)
# метки кластеров для регионов
labels = pd.Series(data=data['cluster'].to_list(), index=data['region'])

# описание кластеров для вывода
cluster_describe = {
    0:'Кластер содержит "тихие", "спокойные" регионы со стареющим сокращающимся населением, низкой рождаемостью и большой долей детей среди малоимущих.',
    1:'Кластер похож на кластер №0, однако имеет наибольшую долю трудоспособных среди малоимущих, проблемы с наркоманией и тяжкими и особо тяжкими преступлениями среди несовершеннолетних. В то же время, демонстрирует хорошие показатели по алкоголизму и условиям проживания.',
    2:'Кластер содержит благополучные развивающиеся промышленные регионы. Благополучен по криминогенной обстановке. Имеет большую долю детей среди малоимущих и самые плохие показатели по реальной начисленной зарплате (она падает год к году). В то же время содержит наименьшую долю населения за чертой бедности. Самые низкие расходы на социальную политику - вероятно, они не нужны, т.к. доля бедных самая низкая в разрезе кластеров.',
    3:'Кластер содержит "депрессивные" регионы, неблагополучные по большинству признаков. Можно отметить самую высокую долю расходов на социальную политику (по сравнению с другими кластерами), однако судя по всему эти расходы неэффективны. Самые лучшие показатели по реальной начисленой зарплате (она растет год к году), но наихудшие показатели по реальным доходам.',
    4:'Самый благополучный кластер по реальной начисленной зарплате (рост год к году), но самый неблагополучный по реальным доходам (однако во всех регионах они растут). Лидер по добыче полезных ископаемы и валовому региональному продукту. Плохие условия проживания. Наибольшая доля трудоспособного населения. Лидер по числу регионов, где наблюдается рост людей, живущих за чертой бедности. Очень "противоречивый" кластер.'
    }

# описания тренда для вывода
trend_describe = {
     1:'положительный тренд (рост) значений признака',
    -1:'отрицательный тренд (падение) значений признака',
     0:'отсутствие изменения признака в динамике',
   404:'отсутсвие данных по тренду'
}

# приветствие бота (начало работы)
print('\nЗдравствуйте! Вас приветствует бот проекта по определению уязвимых групп населения!\n')

# создаём бесконечный цикл работы бота
while True:
    # выводим стандартизированные названия регионов
    print(f'\nНазвания регионов:\n {regions_name}\n')

    # создаём бесконечный цикл работы с названием региона
    while True:
        try:
            
            # получаем название региона
            region = input('Введите название интересующего Вас региона (например, Республика Татарстан):')
                
            # если название региона присутствует в данных 
            if region in regions_name:
            # прерываем цикл и идем дальше
                break
            # если название региона отстутствует в данных или введено неправильно - повтор ввода
            else:
                print('*** К сожалению, этого региона нет в списке, попробуйте снова ***')
        except:
            print('*** Exception handled ***')

    # выводим данные по клстеру региона
    print('-'*50)
    print(f'\nРегион {region} принадлежит кластеру {labels[region]}\n')
    print(f'{cluster_describe[labels[region]]}\n')
    print('-'*50)

    # выводим названия признаков
    print(f'\nНазвания признаков:\n {features_name}\n')

    # создаём бесконечный цикл работы с признаком региона
    while True:
        try:
            
            # получаем название признака
            feature = input('Введите название интересующего Вас признака (например, poverty_percent):')
            # если введн признак тренда или плохого региона
            if 'trend' in feature or 'bad' in feature:
                print('*** К сожалению, данный признак отдельно не рассматривается, попробуйте снова ***')
            # если название признака присутствует в данных 
            elif feature in features_name and ('trend' or 'bad' not in feature):
            # прерываем цикл и идем дальше
                break
            # если название признака отстутствует в данных или введено неправильно - повтор ввода
            else:
                print('*** К сожалению, этого признака нет в данных, попробуйте снова ***')
        except:
            print('*** Exception handled ***')

    # извлекаем значение признака и его тренда
    feature_value = data[data['region'] == region][feature].iloc[0]
    if str(feature)+'_trend' in features_name:
        trend_value = data[data['region'] == region][str(feature)+'_trend'].iloc[0]
    else:
        trend_value = 404
    
    # выводим значение признака для региона и его тренд
    print('-'*50)
    print(f"\nЗначение признака {feature} для региона {region}: {feature_value} ")
    print(f'Отмечается {trend_describe[trend_value]}\n')
    print("Данные по указанному признаку в кластере региона доступны в папке 'output'\n")
    print('-'*50)

    # сохраняем диаграмму значений признака в кластере в разрезе по регионам
    data_plot = data[data['cluster'] == labels[region]][[feature, 'region']]
    fig = plt.figure(figsize=(12,len(data_plot)/3), tight_layout=True)
    plot = sns.barplot(data=data_plot, y='region', x=feature)
    fig.suptitle(
        f'Значение признака *{feature}* в кластере №{labels[region]} в разрезе регионов',
        fontsize=14);
    plt.tick_params (axis='y', which='major', labelsize= 8 )
    plt.xlabel(feature);
    plt.ylabel('');
    #plt.show();
    save_fig = plot.get_figure()
    save_fig.savefig('output/output'+'_'+str(labels[region])+'_'+str(feature)+'.svg')


    to_continue = input('Продолжить? [y/n]')
    if to_continue == 'n':
        break


